#!/usr/bin/env jstar

import io
import sys

// Matches '(c1)+c2....cn' where c1 is the first char of 'str', c2 the second and so on
class NumberDFA
    construct(str, num)
        this.state = -1
        this.str = str
        this.num = num
    end

    fun transition(c)
        if this.str[this.state + 1] == c
            this.state += 1
        elif this.str[0] == c
            this.state = 0
        else
            this.state = -1
        end

        if this.state == #this.str - 1
            this.state = -1
            return this.num
        else
            return null
        end
    end
end

fun transitionAll(dfas, c)
    var num = null
    for var dfa in dfas
        var res = dfa.transition(c)
        if res
            num = res
        end
    end
    return num
end

fun toNum(c)
    var num = std.char(c) - 0x30
    return num if num >= 0 and num <= 9 else null
end

fun computeNumber(line, charToNum)
    var first, last = null, null

    for var c in line
        var num = charToNum(c)
        if num
            if !first
                first = last = num
            else
                last = num
            end
        end
    end

    return first * 10 + last if first and last else 0
end

fun part1(lines)
    return lines.map(|line| => computeNumber(line, toNum)).sum()
end

fun part2(lines)
    return lines.map(fun(line) 
        var dfas = [
            NumberDFA("one", 1),
            NumberDFA("two", 2),
            NumberDFA("three", 3),
            NumberDFA("four", 4),
            NumberDFA("five", 5),
            NumberDFA("six", 6),
            NumberDFA("seven", 7),
            NumberDFA("eight", 8),
            NumberDFA("nine", 9),
        ]

        return computeNumber(line, |c| => transitionAll(dfas, c) or toNum(c))
    end).sum()
end

with io.File(argv[0], "r") f
    var lines = f.readAll().strip().split('\n')
    print("Part 1:", part1(lines))
    print("Part 2:", part2(lines))
end
