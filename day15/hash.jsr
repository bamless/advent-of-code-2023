#!/usr/bin/env jstar

import io
import re

fun findLens(box, label)
    var lens = box.enumerate().find(fun(args)
        var idx, lens = args
        return lens[0] == label
    end)
    return lens[0] if lens else null
end

fun hash(str)
    return str.reduce(0, |acc, c| => (acc + std.char(c)) * 17 & 255)
end

with io.File(argv[0], "r") f
    var instrs = f.
        readAll().
        split(",").
        map(|line| => line.strip()).
        map(|line| => re.match(line, "(.+)([=-])(%d?)")).
        collect(Tuple)
    
    var boxes = List(256, |_| => [])

    for var label, instr, focal in instrs
        var box = boxes[hash(label)]
        var lens = findLens(box, label)

        if instr == "-"
            if lens
                box.removeAt(lens)
            end
        else
            if lens 
                box[lens] = (label, focal)
            else
                box.add((label, focal))
            end
        end
    end
    
    var res = boxes.enumerate().map(fun(args)
        var boxIdx, box = args
        return box.enumerate().map(fun(args)
            var lensIdx, lens = args
            return (boxIdx + 1) * (lensIdx + 1) * std.int(lens[1])
        end).sum()
    end).sum()

    print(res)
end
