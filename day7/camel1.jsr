#!/usr/bin/env jstar

import io

var TYPES = {
    (5,)           : 7,
    (1, 4)         : 6,
    (2, 3)         : 5,
    (1, 1, 3)      : 4,
    (1, 2, 2)      : 3,
    (1, 1, 1, 2)   : 2,
    (1, 1, 1, 1, 1): 1,
}

fun toNum(c)
    return std.char(c) - 0x30
end

fun cardStrength(card)
    return {
        'A': 14,
        'K': 13,
        'Q': 12,
        'J': 11,
        'T': 10,
    }[card] or toNum(card)
end

fun compareStrength(h1, h2)
    for var s1, s2 in h1.zip(h2).map(|cards| => (cardStrength(cards[0]), cardStrength(cards[1])))
        if s1 != s2
            return s1 - s2
        end
    end
    return 0
end

fun computeType(hand) 
    var uniq = {}
    for var card in hand
        if uniq[card]
            uniq[card] += 1
        else
            uniq[card] = 1
        end
    end
    return TYPES[Tuple(uniq.values().sorted())]
end

fun compareType(h1, h2)
    return computeType(h1) - computeType(h2)
end

with io.File(argv[0], "r") f
    var games = f.
        map(|line| => line.strip().split(" ")).
        map(|round| => (round[0], std.int(round[1]))).
        collect(Tuple)

    var res = games.sorted(fun(game1, game2)
            var cmp = compareType(game1[0], game2[0])
            return cmp if cmp != 0 else compareStrength(game1[0], game2[0])
        end).
        enumerate().
        map(fun(idxGame)
            var idx, game = idxGame
            return (idx + 1) * game[1]
        end).
        sum()

    print(res)
end
